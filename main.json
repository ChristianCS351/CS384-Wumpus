 import random
 import sys


index_cavepath1 = 0
index_cavepath2 = 1
index_cavepath3 = 2
index_cavepath4 = 3

index_wumpus = 4
index_bat = 5
index_bat2 = 6
index_bat3 = 7
index_pit = 8
index_pit2 = 9
index_arrow = 10
index_arrow2 = 11


class NormalMode: #This starts normal mode


    def __init__(self, caves_nums):
        self.cave = []

        for caving in range(caves_nums + 1):
            self.cave.append([0, 0, 0, 0, False, False, False, False, False, False, False, False])
        if caves_nums == 25:

            # 1 2 3 4 5
            # 6 7 8 9 10
            # 11 12 13 14 15
            # 16 17 18 19 20
            # 21 22 23 24 25

            #Cave Numbering = up, down, right, left, 4 things:                     
            self.cave[1] = [1, 6, 2, 1, False, False, False, False ,False, False, False, False]
            self.cave[2] = [2, 7, 3, 1, False, False, False, False ,False, False, False, False]
            self.cave[3] = [3, 8, 4, 2, False, False, False, False ,False, False, False, False]
            self.cave[4] = [4, 9, 5, 3, False, False, False, False ,False, False, False, False]
            self.cave[5] = [5, 10, 5, 4, False, False, False, False ,False, False, False, False]
            self.cave[6] = [1, 11, 7, 6, False, False, False, False ,False, False, False, False]
            self.cave[7] = [2, 12, 8, 6, False, False, False, False ,False, False, False, False]
            self.cave[8] = [3, 13, 9, 7, False, False, False, False ,False, False, False, False]
            self.cave[9] = [4, 14, 10, 8, False, False, False, False ,False, False, False, False]
            self.cave[10] = [5, 15, 10, 9, False, False, False, False ,False, False, False, False]
            self.cave[11] = [6, 16, 12, 11, False, False, False, False ,False, False, False, False]
            self.cave[12] = [7, 17, 13, 11, False, False, False, False ,False, False, False, False]
            self.cave[13] = [8, 18, 14, 12, False, False, False, False ,False, False, False, False]
            self.cave[14] = [9, 19, 15, 13, False, False, False, False ,False, False, False, False]
            self.cave[15] = [10, 20, 15, 14, False, False, False, False ,False, False, False, False]
            self.cave[16] = [11, 21, 17, 16, False, False, False, False ,False, False, False, False]
            self.cave[17] = [12, 22, 18, 16, False, False, False, False ,False, False, False, False]
            self.cave[18] = [13, 23, 19, 17, False, False, False, False ,False, False, False, False]
            self.cave[19] = [14, 24, 20, 18, False, False, False, False ,False, False, False, False]
            self.cave[20] = [15, 25, 20, 19, False, False, False, False ,False, False, False, False]
            self.cave[21] = [16, 21, 22, 21, False, False, False, False ,False, False, False, False]
            self.cave[22] = [17, 22, 23, 21, False, False, False, False ,False, False, False, False]
            self.cave[23] = [18, 23, 24, 22, False, False, False, False ,False, False, False, False]
            self.cave[24] = [19, 24, 25, 23, False, False, False, False ,False, False, False, False]
            self.cave[25] = [20, 25, 25, 24, False, False, False, False ,False, False, False, False]
        else:
            sys.exit()

        #Adding my Wumpus :D
        wumpus_place = 0 #This makes sure that the Wumpus will actually be placed and not forgotten, I used while to make sure it will never skip this as that would remove the entire point of winning if no Wumpus.
        wumpus_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            self.cave[put_random][index_wumpus] = True
            break

        #Adding my Bat :D
        bat_place = 0
        bat_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if self.cave[put_random][index_wumpus] == False:
               self.cave[put_random][index_bat] = True
               break

        #Adding my Pit :D
        pit_place = 0
        pit_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False and self.cave[put_random][index_bat] == False):
               self.cave[put_random][index_pit] = True
               break

        #Adding Arrow :D
        arrow_place = 0
        arrow_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False and self.cave[put_random][index_bat] == False and self.cave[put_random][index_pit] == False):
               self.cave[put_random][index_arrow] = True
               break

    def player_starts(self, caves_nums):
        player_place = 0
        player_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False and self.cave[put_random][index_bat] == False and self.cave[put_random][index_pit] == False and self.cave[put_random][index_arrow] == False):
                player_start = put_random
                player_place = player_place + 1
                return player_start
    
    def Actions(self, caves_nums, player_start):
        print(f"Ok great, you have spawned inside of the {player_start} cave, so lets begin shall we.\n")
        wumpus_dead = False
        arrow_supply = 3
        #For this wumpus, pit, etc. I used this code "wumpus_loc = self.cave[caves_nums][index_wumpus] = True" but it kep returning error
        #So I used ChatGPT for minor code guidance and support and it suggested I use enumerate and use i to switch it wumpus_loc.
        wumpus_loc = [i for i, cave in enumerate(self.cave) if cave[index_wumpus]][0]
        bat_loc = [i for i, cave in enumerate(self.cave) if cave[index_bat]][0]
        pit_loc = [i for i, cave in enumerate(self.cave) if cave[index_pit]][0]
        arrow_loc = [i for i, cave in enumerate(self.cave) if cave[index_arrow]][0]


        while wumpus_dead == False:

            if player_start == bat_loc:
                player_start = random.randrange(25) #This moves the play to any 25 tiles
                print(f"EEKKK EEEKK EEKKK! The bats took you away and placed you in cave {player_start} how cruel!\n")
                continue

            if player_start == wumpus_loc:
                print("Oh no, the Wumpus has eaten you like a jelly donut, a Raspberry to be specific. You are Dead!\n")
                break

            if player_start == pit_loc:
                print("AHHHHHHHH!!!! *crash* You fell into a pit like a blind person who is also deaf. You are Dead!\n")
                break
            
            if player_start == arrow_loc:
                self.cave[arrow_loc][index_arrow] = False
                arrow_supply += 1
                print(f"\nGood Find!! You found a nifty arrow in this room, you now have an extra arrow to use. You now have {arrow_supply} arrows.\n")
                arrow_loc = random.randrange(100,200)

            cave1 = self.cave[player_start][index_cavepath1]
            cave2 = self.cave[player_start][index_cavepath2]
            cave3 = self.cave[player_start][index_cavepath3]
            cave4 = self.cave[player_start][index_cavepath4]
    
            print(f"You are alive and are standing in cave {player_start} which lead to caves {cave1}, {cave2}, {cave3}, and {cave4}!\n")
            
            if wumpus_loc in [(cave1),(cave2),(cave3),(cave4)]:
                print("You smell a horrid stench, A Wumpus must be close!!!")

            if bat_loc in [(cave1),(cave2),(cave3),(cave4)]:
                print("You hear flapping. Bats are closeby!!!")

            if pit_loc in [(cave1),(cave2),(cave3),(cave4)]:
                print("You hear a whistling wind, you are close to a Pit!!!")
            
            player_moving = ''
            while player_moving not in ['S','s','M','m']:
                  player_moving = input("\nWhat is your move Player, press (M) to move or press (S) to shoot: ")
             
            if player_moving in ['S','s']:
                if arrow_supply > 0:

                    print("\nOkay Player, you have decided to shoot an arrow to a nearby cave.")
                    shoot_choice = ''
                    while True:
                        try:

                            shoot_choice = int(input(f"Where would you like to shoot the arrow? In cave {cave1}, {cave2}, {cave3}, or {cave4}. "))
                            if shoot_choice in [cave1, cave2, cave3, cave4]:
                                break
                        except ValueError:
                            pass
                    if shoot_choice == wumpus_loc:
                        print("\nBAMMMM! You got a headshot, you killed the Wumpus and saved your own self, CONGRATS!")
                        wumpus_dead = True
                    else:
                        arrow_supply = arrow_supply - 1
                        print(f"\nOh drats, you missed the Wumpus, you now have {arrow_supply} arrows remaining.\n")
                        wumpus_killmove = random.choice(['run','run','kill','run','run'])

                        if wumpus_killmove == 'run':
                            print("The Wumpus has retreated!\n")
                            wumpus_loc = random.randrange(caves_nums)

                        elif wumpus_killmove == 'kill':
                            print("Oh no, the Wumpus has eaten you like a jelly donut, a Raspberry to be specific. You are Dead!\n")
                            break
                else:
                    print("\nSorry, you no longer have arrows to shoot.\n")


            elif player_moving in ['M','m']:
                move_now = ''
                while True:
                    try:

                        move_now = int(input(f"\nOk great let's get moving now, which cave would you like to move to? Cave {cave1}, {cave2}, {cave3}, or {cave4}: "))
                        if move_now in [cave1, cave2, cave3, cave4]:
                            break
                    except ValueError:
                        pass
                player_start = move_now
                print(f"\nOk Great, you have now moved to cave {player_start}!")

        if wumpus_dead == True: #This prints the victory message since Wumpus dead is now officially true
           print("\nYou have escaped and saved the nearby village!!!") 
           menu()
        else:
           print("The Village now a forever hostage of the Wumpus!\n")
           menu()


class SimpleMode: #This is simple mode class

    def __init__(self, caves_nums):
        self.cave = []

        for caving in range(caves_nums + 1):
            self.cave.append([0, 0, 0, 0, False, False, False, False, False, False, False, False])
        if caves_nums == 20:

            # 1 2 3 4 5
            # 6 7 8 9 10
            # 11 12 13 14 15
            # 16 17 18 19 20

            #Cave Numbering = up, down, right, left, 4 things:  
            self.cave[1] = [1, 6, 2, 1, False, False, False, False ,False, False, False, False]
            self.cave[2] = [2, 7, 3, 1, False, False, False, False ,False, False, False, False]
            self.cave[3] = [3, 8, 4, 2, False, False, False, False ,False, False, False, False]
            self.cave[4] = [4, 9, 5, 3, False, False, False, False ,False, False, False, False]
            self.cave[5] = [5, 10, 5, 4, False, False, False, False ,False, False, False, False]
            self.cave[6] = [1, 11, 7, 6, False, False, False, False ,False, False, False, False]
            self.cave[7] = [2, 12, 8, 6, False, False, False, False ,False, False, False, False]
            self.cave[8] = [3, 13, 9, 7, False, False, False, False ,False, False, False, False]
            self.cave[9] = [4, 14, 10, 8, False, False, False, False ,False, False, False, False]
            self.cave[10] = [5, 15, 10, 9, False, False, False, False ,False, False, False, False]
            self.cave[11] = [6, 16, 12, 11, False, False, False, False ,False, False, False, False]
            self.cave[12] = [7, 17, 13, 11, False, False, False, False ,False, False, False, False]
            self.cave[13] = [8, 18, 14, 12, False, False, False, False ,False, False, False, False]
            self.cave[14] = [9, 19, 15, 13, False, False, False, False ,False, False, False, False]
            self.cave[15] = [10, 20, 15, 14, False, False, False, False ,False, False, False, False]
            self.cave[16] = [11, 16, 17, 16, False, False, False, False ,False, False, False, False]
            self.cave[17] = [12, 17, 18, 16, False, False, False, False ,False, False, False, False]
            self.cave[18] = [13, 18, 19, 17, False, False, False, False ,False, False, False, False]
            self.cave[19] = [14, 19, 20, 18, False, False, False, False ,False, False, False, False]
            self.cave[20] = [15, 20, 20, 19, False, False, False, False ,False, False, False, False]                  

        else:
            sys.exit()

        #Adding my Wumpus :D
        wumpus_place = 0 #This makes sure that the Wumpus will actually be placed and not forgotten, I used while to make sure it will never skip this as that would remove the entire point of winning if no Wumpus.
        wumpus_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            self.cave[put_random][index_wumpus] = True
            break


        #Adding Arrow :D
        arrow_place = 0
        arrow_in = 1
        while True:
            put_random = random.randrange(2, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False and self.cave[put_random][index_bat] == False and self.cave[put_random][index_pit] == False):
               self.cave[put_random][index_arrow] = True
               break

        #Adding Arrow 2 :D
        arrow_place2 = 0
        arrow_in2 = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False and self.cave[put_random][index_arrow] == False):
               self.cave[put_random][index_arrow2] = True
               break

    def player_starts(self, caves_nums):
        player_place = 0
        player_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False):
                player_start = put_random
                player_place = player_place + 1
                return player_start
    
    def Actions(self, caves_nums, player_start):
        print(f"Ok great, you have spawned inside of the {player_start} cave, so lets begin shall we.\n")
        wumpus_dead = False
        arrow_supply = 3
        #For this wumpus, pit, etc. I used this code "wumpus_loc = self.cave[caves_nums][index_wumpus] = True" but it kep returning error
        #So I used ChatGPT for minor code guidance and support and it suggested I use enumerate and use i to switch it wumpus_loc.
        wumpus_loc = [i for i, cave in enumerate(self.cave) if cave[index_wumpus]][0]
        arrow_loc = [i for i, cave in enumerate(self.cave) if cave[index_arrow]][0]
        arrow_loc2 = [i for i, cave in enumerate(self.cave) if cave[index_arrow2]][0]
        


        while wumpus_dead == False:

           

            if player_start == wumpus_loc:
                print("Oh no, the Wumpus has eaten you like a jelly donut, a Raspberry to be specific. You are Dead!\n")
                break

            
            if player_start == arrow_loc:
                self.cave[arrow_loc][index_arrow] = False
                arrow_supply += 1
                print(f"\nGood Find!! You found a nifty arrow in this room, you now have an extra arrow to use. You now have {arrow_supply} arrows.\n")
                arrow_loc = random.randrange(100,200)
                continue
               

            if player_start == arrow_loc2:
                self.cave[arrow_loc][index_arrow2] = False
                arrow_supply += 1
                print(f"\nGood Find!! You found a nifty arrow in this room, you now have an extra arrow to use. You now have {arrow_supply} arrows.\n")
                arrow_loc2 = random.randrange(100,200)
                continue
               

            cave1 = self.cave[player_start][index_cavepath1]
            cave2 = self.cave[player_start][index_cavepath2]
            cave3 = self.cave[player_start][index_cavepath3]
            cave4 = self.cave[player_start][index_cavepath4]
    
            print(f"You are alive and are standing in cave {player_start} which lead to caves {cave1}, {cave2}, {cave3}, and {cave4}!\n")
            
            if wumpus_loc in [(cave1),(cave2),(cave3),(cave4)]:
                print("You smell a horrid stench, A Wumpus must be close!!!")
            
            player_moving = ''
            while player_moving not in ['S','s','M','m']:
                  player_moving = input("\nWhat is your move Player, press (M) to move or press (S) to shoot: ")
             
            if player_moving in ['S','s']:
                if arrow_supply > 0:

                    print("\nOkay Player, you have decided to shoot an arrow to a nearby cave.")
                    shoot_choice = ''
                    while True:
                        try:

                            shoot_choice = int(input(f"Where would you like to shoot the arrow? In cave {cave1}, {cave2}, {cave3}, or {cave4}. "))
                            if shoot_choice in [cave1, cave2, cave3, cave4]:
                                break
                        except ValueError:
                            pass
                    if shoot_choice == wumpus_loc:
                        print("\nBAMMMM! You got a headshot, you killed the Wumpus and saved your own self, CONGRATS!")
                        wumpus_dead = True
                    else:
                        arrow_supply = arrow_supply - 1
                        print(f"\nOh drats, you missed the Wumpus, you now have {arrow_supply} arrows remaining.\n")
                        wumpus_killmove = random.choice(['run','run','stay','stay'])

                        if wumpus_killmove == 'run':
                            print("The Wumpus has retreated!\n")
                            wumpus_loc = random.randrange(caves_nums)

                        elif wumpus_killmove == 'stay':
                            print("Great, the Wumpus has stayed in place, maybe you can shoot this time before it escapes!\n")
                            continue
                else:
                    print("\nSorry, you no longer have arrows to shoot.\n")


            elif player_moving in ['M','m']:
                move_now = ''
                while True:
                    try:

                        move_now = int(input(f"\nOk great let's get moving now, which cave would you like to move to? Cave {cave1}, {cave2}, {cave3}, or {cave4}: "))
                        if move_now in [cave1, cave2, cave3, cave4]:
                            break
                    except ValueError:
                        pass
                player_start = move_now
                print(f"\nOk Great, you have now moved to cave {player_start}!")

        if wumpus_dead == True:
           print("\nYou have escaped and saved the nearby village!!!")
           menu()
        else:
           print("The Village now a forever hostage of the Wumpus!\n")
           menu()

    


class HardMode: #This is hard mode class


    def __init__(self, caves_nums):
        self.cave = []

        for caving in range(caves_nums + 1):
            self.cave.append([0, 0, 0, 0, False, False, False, False, False, False, False, False])
        if caves_nums == 36:

            # 1 2 3 4 5 6
            # 7 8 9 10 11 12
            # 13 14 15 16 17 18
            # 19 20 21 22 23 24 
            # 25 26 27 28 29 30
            # 31 32 33 34 35 36


            #Cave Numbering = up, down, right, left, 4 things:                     
            self.cave[1] = [1, 7, 2, 1, False, False, False, False ,False, False, False, False]
            self.cave[2] = [2, 8, 3, 1, False, False, False, False ,False, False, False, False]
            self.cave[3] = [3, 9, 4, 2, False, False, False, False ,False, False, False, False]
            self.cave[4] = [4, 10, 5, 3, False, False, False, False ,False, False, False, False]
            self.cave[5] = [5, 11, 6, 4, False, False, False, False ,False, False, False, False]
            self.cave[6] = [6, 12, 6, 5, False, False, False, False ,False, False, False, False]
            self.cave[7] = [1, 13, 8, 7, False, False, False, False ,False, False, False, False]
            self.cave[8] = [2, 14, 9, 7, False, False, False, False ,False, False, False, False]
            self.cave[9] = [3, 15, 10, 8, False, False, False, False ,False, False, False, False]
            self.cave[10] = [4, 16, 11, 9, False, False, False, False ,False, False, False, False]
            self.cave[11] = [5, 17, 12, 10, False, False, False, False ,False, False, False, False]
            self.cave[12] = [6, 18, 12, 11, False, False, False, False ,False, False, False, False]
            self.cave[13] = [7, 19, 14, 13, False, False, False, False ,False, False, False, False]
            self.cave[14] = [8, 20, 15, 13, False, False, False, False ,False, False, False, False]
            self.cave[15] = [9, 21, 16, 14, False, False, False, False ,False, False, False, False]
            self.cave[16] = [10, 22, 17, 15, False, False, False, False ,False, False, False, False]
            self.cave[17] = [11, 23, 18, 16, False, False, False, False ,False, False, False, False]
            self.cave[18] = [12, 24, 18, 17, False, False, False, False ,False, False, False, False]
            self.cave[19] = [13, 25, 20, 19, False, False, False, False ,False, False, False, False]
            self.cave[20] = [14, 26, 21, 19, False, False, False, False ,False, False, False, False]
            self.cave[21] = [15, 27, 22, 20, False, False, False, False ,False, False, False, False]
            self.cave[22] = [16, 28, 23, 21, False, False, False, False ,False, False, False, False]
            self.cave[23] = [17, 29, 24, 22, False, False, False, False ,False, False, False, False]
            self.cave[24] = [18, 30, 24, 23, False, False, False, False ,False, False, False, False]
            self.cave[25] = [19, 31, 26, 25, False, False, False, False ,False, False, False, False]
            self.cave[26] = [20, 32, 27, 25, False, False, False, False ,False, False, False, False]
            self.cave[27] = [21, 33, 28, 26, False, False, False, False ,False, False, False, False]
            self.cave[28] = [22, 34, 29, 27, False, False, False, False ,False, False, False, False]
            self.cave[29] = [23, 35, 30, 28, False, False, False, False ,False, False, False, False]
            self.cave[30] = [24, 36, 30, 29, False, False, False, False ,False, False, False, False]
            self.cave[31] = [25, 31, 32, 31, False, False, False, False ,False, False, False, False]
            self.cave[32] = [26, 32, 33, 31, False, False, False, False ,False, False, False, False]
            self.cave[33] = [27, 33, 34, 32, False, False, False, False ,False, False, False, False]
            self.cave[34] = [28, 34, 35, 33, False, False, False, False ,False, False, False, False]
            self.cave[35] = [29, 35, 36, 34, False, False, False, False ,False, False, False, False]
            self.cave[36] = [30, 36, 36, 35, False, False, False, False ,False, False, False, False]
        else:
            sys.exit()

        #Adding my Wumpus :D
        wumpus_place = 0 #This makes sure that the Wumpus will actually be placed and not forgotten, I used while to make sure it will never skip this as that would remove the entire point of winning if no Wumpus.
        wumpus_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            self.cave[put_random][index_wumpus] = True
            break

        #Adding my Bat :D
        bat_place = 0
        bat_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if self.cave[put_random][index_wumpus] == False:
               self.cave[put_random][index_bat] = True
               break

        #Adding my Bat2 :D
        bat_place2 = 0
        bat_in2 = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False and self.cave[put_random][index_bat] == False):
               self.cave[put_random][index_bat2] = True
               break

        #Adding my Bat3 :D
        bat_place3 = 0
        bat_in3 = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False and self.cave[put_random][index_bat] == False and self.cave[put_random][index_bat2] == False):
               self.cave[put_random][index_bat3] = True
               break

        #Adding my Pit :D
        pit_place = 0
        pit_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False and self.cave[put_random][index_bat] == False and self.cave[put_random][index_bat2] == False and self.cave[put_random][index_bat3] == False):
               self.cave[put_random][index_pit] = True
               break

        #Adding my Pit2 :D
        pit_place2 = 0
        pit_in2 = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False and self.cave[put_random][index_bat] == False and self.cave[put_random][index_bat2] == False and self.cave[put_random][index_bat3] == False and self.cave[put_random][index_pit] == False):
               self.cave[put_random][index_pit2] = True
               break



    def player_starts(self, caves_nums):
        player_place = 0
        player_in = 1
        while True:
            put_random = random.randrange(1, caves_nums + 1)
            if (self.cave[put_random][index_wumpus] == False and self.cave[put_random][index_bat] == False and self.cave[put_random][index_bat2] == False and self.cave[put_random][index_bat3] == False and self.cave[put_random][index_pit] == False):
                player_start = put_random
                player_place = player_place + 1
                return player_start
    
    def Actions(self, caves_nums, player_start):
        print(f"Ok great, you have spawned inside of the {player_start} cave, so lets begin the hard journey shall we.\n")
        wumpus_dead = False
        arrow_supply = 2
        #For this wumpus, pit, etc. I used this code "wumpus_loc = self.cave[caves_nums][index_wumpus] = True" but it kep returning error
        #So I used ChatGPT for minor code guidance and support and it suggested I use enumerate and use i to switch it wumpus_loc.
        wumpus_loc = [i for i, cave in enumerate(self.cave) if cave[index_wumpus]][0]
        bat_loc = [i for i, cave in enumerate(self.cave) if cave[index_bat]][0]
        bat_loc2 = [i for i, cave in enumerate(self.cave) if cave[index_bat2]][0]
        bat_loc3 = [i for i, cave in enumerate(self.cave) if cave[index_bat3]][0]
        pit_loc = [i for i, cave in enumerate(self.cave) if cave[index_pit]][0]
        pit_loc2 = [i for i, cave in enumerate(self.cave) if cave[index_pit2]][0]


        while wumpus_dead == False:

            if player_start == bat_loc:
                bat_killmove = random.choice(['move','move','kill','move','move'])

                if bat_killmove == 'move':
                    player_start = random.randrange(36)
                    print(f"EEKKK EEEKK EEKKK! The bats spared you and took you away and placed you in cave {player_start} how cruel!\n")
                    continue

                elif bat_killmove == 'kill':
                    print("Oh no, the bats just ripped you to shreds as they did not want the Wumpus to get all the action. You are Dead!\n")
                    break
                
            if player_start == bat_loc2:
                bat_killmove = random.choice(['move','move','kill','move','move']) #Here the bat can now kill the player possibly.

                if bat_killmove == 'move':
                    player_start = random.randrange(36)
                    print(f"EEKKK EEEKK EEKKK! The bats spared you and took you away and placed you in cave {player_start} how cruel!\n")
                    continue

                elif bat_killmove == 'kill':
                    print("Oh no, the bats just ripped you to shreds as they did not want the Wumpus to get all the action. You are Dead!\n")
                    break
                
            if player_start == bat_loc3:
                bat_killmove = random.choice(['move','move','kill','move','move'])

                if bat_killmove == 'move':
                    player_start = random.randrange(36)
                    print(f"EEKKK EEEKK EEKKK! The bats spared you and took you away and placed you in cave {player_start} how cruel!\n")
                    continue

                elif bat_killmove == 'kill':
                    print("Oh no, the bats just ripped you to shreds as they did not want the Wumpus to get all the action. You are Dead!\n")
                    break
        

            if player_start == wumpus_loc:
                print("Oh no, the Juggernaut Wumpus picked you up and tore you in half, Hardcore if I do say. You are Dead!\n")
                break

            if player_start == pit_loc:
                print("AHHHHHHHH!!!! *crash* You fell into a pit like a blind person who is also deaf. You are Dead!\n")
                break

            if player_start == pit_loc2:
                print("AHHHHHHHH!!!! *crash* You fell into a pit like a blind person who is also deaf. You are Dead!\n")
                break
            

            cave1 = self.cave[player_start][index_cavepath1]
            cave2 = self.cave[player_start][index_cavepath2]
            cave3 = self.cave[player_start][index_cavepath3]
            cave4 = self.cave[player_start][index_cavepath4]
    
            print(f"You are alive and are standing in cave {player_start} which lead to caves {cave1}, {cave2}, {cave3}, and {cave4}!\n")
            
            if wumpus_loc in [(cave1),(cave2),(cave3),(cave4)]:
                print("You smell a horrid stench and blood, A Juggernaut Wumpus must be close!!!")

            if bat_loc in [(cave1),(cave2),(cave3),(cave4)]:
                print("You hear flapping. Those Savage Bats are closeby!!!")

            if bat_loc2 in [(cave1),(cave2),(cave3),(cave4)]:
                print("You hear flapping. Those Savage Bats are closeby!!!")

            if bat_loc3 in [(cave1),(cave2),(cave3),(cave4)]:
                print("You hear flapping. Those Savage Bats are closeby!!!")

            if pit_loc in [(cave1),(cave2),(cave3),(cave4)]:
                print("You hear a whistling wind, you are close to a Pit!!!")
            
            if pit_loc2 in [(cave1),(cave2),(cave3),(cave4)]:
                print("You hear a whistling wind, you are close to a Pit!!!")
            
            player_moving = ''
            while player_moving not in ['S','s','M','m']:
                  player_moving = input("\nWhat is your move Player, press (M) to move or press (S) to shoot: ")
             
            if player_moving in ['S','s']:
                if arrow_supply > 0:

                    print("\nOkay Player, you have decided to shoot an arrow to a nearby cave, pray you're right.")
                    shoot_choice = ''
                    while True:
                        try:

                            shoot_choice = int(input(f"Where would you like to shoot the arrow? In cave {cave1}, {cave2}, {cave3}, or {cave4}. "))
                            if shoot_choice in [cave1, cave2, cave3, cave4]:
                                break
                        except ValueError:
                            pass
                    if shoot_choice == wumpus_loc:
                        print("\nBAMMMM! You got a headshot, you killed the Juggernaut Wumpus and saved yourself from being two halves, CONGRATS!")
                        wumpus_dead = True
                    else:
                        arrow_supply = arrow_supply - 1
                        print(f"\nOh drats, you missed the Wumpus, you now have {arrow_supply} arrows remaining.\n")
                        wumpus_killmove = random.choice(['run','kill'])

                        if wumpus_killmove == 'run':
                            print("The Wumpus has retreated, thankfully!\n")
                            wumpus_loc = random.randrange(caves_nums)

                        elif wumpus_killmove == 'kill':
                            print("Oh no, the Juggernaut Wumpus picked you up and tore you in half, Hardcore if I do say. You are Dead!\n")
                            break
                else:
                    print("\nSorry, you no longer have arrows to shoot.\n")


            elif player_moving in ['M','m']:
                move_now = ''
                while True:
                    try:

                        move_now = int(input(f"\nOk great let's get moving now, which cave would you like to move to? Cave {cave1}, {cave2}, {cave3}, or {cave4}: "))
                        if move_now in [cave1, cave2, cave3, cave4]:
                            break
                    except ValueError:
                        pass
                player_start = move_now
                print(f"\nOk Great, you have now moved to cave {player_start}!")

        if wumpus_dead == True:
           print("\nYou have escaped and saved the nearby village, Gold Medal for you!!!")
           menu()
        else:
           print("The Village will now forever feel the wrath of Juggernaut Wumpus!\n")
           menu()



def menu():  #This is my menu for the Wumpus game, I plan to make a few gamemodes here to make it unique and a rules sheet.
    print("Welcome to Hunt the Wumpus!")
    print("---------------------------\n")
    print("Menu Choices:")
    print("-------1. Play Normal Mode: ---------")
    print("-------2. Play Simple Mode: -----------")
    print("-------3. Play Hard Mode: -----------")
    print("-------4. Read Rules: ---------------")
    print("-------5. Exit Game: ----------------\n")
    game_choice = input("Please select an option between (1 to 5): ")
    print(game_choice)

    if game_choice == '1':
        print("\nOk then, let's bring you into the classic version of the Hunt the Wumpus Game!\n")
        print("------------------------------------------------------------------------------\n")
        caves_nums = 25
        normal = NormalMode(caves_nums)
        start_location = normal.player_starts(caves_nums) #This privately randomly generates a place for you in the cave.
        start_location = normal.Actions(caves_nums, start_location) #This brings the player to the game basically.
    elif game_choice == '2':
        print("\nOk then, let's bring you into the simple version of Hunt the Wumpus Game!\n")
        caves_nums = 20
        simple = SimpleMode(caves_nums)
        start_location = simple.player_starts(caves_nums)
        start_location = simple.Actions(caves_nums, start_location)
    elif game_choice == '3':
        print("\nOk then, you will be sorry :D. Let's bring you into the hard version of the Hunt the Wumpus Game!\n")
        print("\nOk then, let's bring you into the hard version of Hunt the Wumpus Game!\n")
        caves_nums = 36
        hard = HardMode(caves_nums)
        start_location = hard.player_starts(caves_nums)
        start_location = hard.Actions(caves_nums, start_location)
    elif game_choice == '4':
        print("\nOk then, taking you to rules!\n")
        rules_sheet()
    elif game_choice == '5':
        print("\nOk then, Goodbye :D")
        sys.exit()
    else:
        menu()
        print("Invalid Choice, please type 1,2,3,4,5 in the game menu.\n")
    

def rules_sheet():
    print("Welcome to the Rules Sheet, Your Guide to Know How to Play!")
    print("-----------------------------------------------------------\n")
    print("\nOk, what would you like to learn about? Just Select the Number Options:")
    print("-------1. General Rules: ---------")
    print("-------2. Normal Mode Rules: -----------")
    print("-------3. Baby Mode Rules -----------")
    print("-------4. Hard Rules: ---------------")
    print("-------5. Return to Menu: ----------------\n\n")
    menu_choice = input("Please select an option between (1 to 5): ")
    print(menu_choice)

    if menu_choice == '1':
        print("\nHere are the General Rules!")
        print("---------------------------\n")
        print("You are a hunter tasked to find and eliminate a putrid creature known as the Wumpus! This Wumpus hides in a cave system and it is your job to use your arrows to kill this Wumpus! Here are some of the fundamentals:\n")
        print("Player: You will start on a random tile in the cave and may have the option to go up, down, right, or left! The Wumpus will not move when you do, but that will not stop you from potentially running into it or other hazards.\n")
        continue_gen1 = input("Type anything to continue: ") #This allows any button to be pressed to continue with no issue.
        print("\nArrows: The Player will start with a variety of arrows used to kill the Wumpus. Be warned though, shooting an arrow and not killing the Wumpus will startle it, causing it to flee to another tile in the cave or it could just kill you for fun right then and their and maybe it could just not move. Arrows can be found maybe on certain tiles, but it depends on mode. Once you run out of arrows and tiles to collect them, you are most likely doomed, so just commit Wumpuside.")
        print("\nBats: Awaiting in the cave system could be a swarm of angry bats. If you run into bats, they will carry you and drop you onto a random tile in the cave. This random tile could be safe but also dangerous to potentially cause your death. In harder modes, the bats may just rip you into shreds. You cannot kill bats with arrows, so don't even try.\n" )
        continue_gen2 = input("Type anything to continue: ") #This allows any button to be pressed to continue with no issue.
        print("\nPit: There can be deep pits in the cave that will cause your death if you walk onto the tile with one. The Wumpus can walk on these pits. Arrows of course are useless on a pit because you obviously can't kill it. Just avoid the pits to be okay.\n")
        print("Warnings: You will receive an audible warning if there is a draft, bats, or Wumpus near your cave tile. This will obviously help you avoid danger and kill the Wumpus for good.\n")
        print("Overall, those are the main rules, best of luck Player and kill that horrible Wumpus before he devours you like a jelly donut!\n")
        end_gen = input("Please type anything to return to rules sheet: ")
        rules_sheet()
    
    elif menu_choice == '2':
        print("\nHere are the Normal Game Mode Rules!")
        print("------------------------------------\n")
        print("Cave System: There will be 25 cave tiles 5 by 5 to navigate, you will be on a random one and could spawn into death possibly.\n")
        print("Arrows: You will start with 3 arrows. One tile in the cave will have a free backup arrow.\n")
        print("Bats and Pits: There will be one bat and one pit tile and you will get warning if near one.\n")
        continue_nor1 = input("Type anything to continue: ")
        print("\nWumpus: If you miss a shot the Wumpus will have a 80% to move and a 20% to kill you instantly from anywhere you are.")
        print("\nBats: Bats will not be able to kill you in this mode, just move you randomly, which could kill you if you are put on the wrong tile.\n")
        end_nor = input("Please type anything to return to rules sheet: ")
        rules_sheet()

    elif menu_choice == '3':
        print("\nHere are the Baby Game Mode Rules!")
        print("----------------------------------\n")
        print("Cave System: There will be 20 cave tiles 4 by 5 to navigate, you will be on a random one and could spawn into death possibly.\n")
        print("Arrows: You will start with 3 arrows. Two tiles in the cave will have a free backup arrow.\n")
        print("Bats and Pits: No bats or pits will spawn in this particular mode.\n")
        continue_sim1 = input("Type anything to continue: ")
        print("\nWumpus: If you miss a shot the Wumpus will have a 50% to move and 50% to not move at all.")
        end_sim = input("Please type anything to return to rules sheet: ")
        rules_sheet()
    elif menu_choice == '4':
        print("\nHere are the Hard Game Mode Rules!")
        print("----------------------------------\n")
        print("Cave System: There will be 36 cave tiles 6 by 6 to navigate, you will be on a random one and could spawn into death possibly.\n")
        print("Arrows: You will start with 2 arrows. No tiles will have an arrow on it.\n")
        print("Bats and Pits: There will be two bat and two pit tiles and you will get warning if near one.\n")
        continue_har1 = input("Type anything to continue: ")
        print("\nWumpus: If you miss a shot the Wumpus will have 50% to move and 50% to kill you instantly from anywhere you are.")
        print("\nBats: Bats will be able to kill you if you encounter one at 20%, and of course 80% to just move you randomly, which could kill you if you are put on the wrong tile.\n")
        end_har = input("Please type anything to return to rules sheet: ")
        rules_sheet()

    elif menu_choice == '5':
        print("\nReturning to menu!\n")
        menu()
    else:
        rules_sheet()
        print("Invalid Choice, please type 1,2,3,4,5 in the rules menu.\n")
   

print(menu())
